// Code generated from Pkl module `AppRoleToken`. DO NOT EDIT.
import PklSwift

public enum AppRoleToken {}

extension AppRoleToken {
    /// This is the DTO for generating a new Secret-ID for an AppRole
    /// See AppRoleAuth.pkl and [API](https://developer.hashicorp.com/vault/api-docs/auth/approle#parameters-5)
    public struct Module: PklRegisteredType, Decodable, Hashable {
        public static let registeredIdentifier: String = "AppRoleToken"

        /// Name of the AppRole. Must be less than 4096 bytes.
        public var role_name: String

        /// Metadata to be tied to the SecretID. This should be a JSON-formatted string containing the metadata in key-value pairs. This metadata will be set on tokens issued with this SecretID, and is logged in audit logs in plaintext.
        public var meta: [String: String]?

        /// Comma separated string or list of CIDR blocks enforcing secret IDs to be used from specific set of IP addresses.
        /// If `secret_id_bound_cidrs` is set on the role, then the list of CIDR blocks listed here should be a subset of the CIDR blocks listed on the role.
        public var cidr_list: [String]?

        /// Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can use the auth tokens generated by this SecretID. Overrides any role-set value but must be a subset
        public var token_bound_cidrs: [String]?

        /// Duration in seconds (3600) or an integer time unit (60m) after which this SecretID expires. A value of zero will allow the SecretID to not expire.
        /// Overrides `secret_id_ttl` role option when supplied. May not be longer than role's `secret_id_ttl`.
        public var ttl: Duration?

        /// The maximum uses for the given token. This can be used to create a one-time-token or limited use token. The value of 0 has no limit to the number of uses.
        public var num_uses: Int?

        /// Set to wrap-response the generated token with the given TTL.
        public var wrap_ttl: Duration?

        public init(
            role_name: String,
            meta: [String: String]?,
            cidr_list: [String]?,
            token_bound_cidrs: [String]?,
            ttl: Duration?,
            num_uses: Int?,
            wrap_ttl: Duration?
        ) {
            self.role_name = role_name
            self.meta = meta
            self.cidr_list = cidr_list
            self.token_bound_cidrs = token_bound_cidrs
            self.ttl = ttl
            self.num_uses = num_uses
            self.wrap_ttl = wrap_ttl
        }
    }

    /// Load the Pkl module at the given source and evaluate it into `AppRoleToken.Module`.
    ///
    /// - Parameter source: The source of the Pkl module.
    public static func loadFrom(source: ModuleSource) async throws -> AppRoleToken.Module {
        try await PklSwift.withEvaluator { evaluator in
            try await loadFrom(evaluator: evaluator, source: source)
        }
    }

    /// Load the Pkl module at the given source and evaluate it with the given evaluator into
    /// `AppRoleToken.Module`.
    ///
    /// - Parameter evaluator: The evaluator to use for evaluation.
    /// - Parameter source: The module to evaluate.
    public static func loadFrom(
        evaluator: PklSwift.Evaluator,
        source: PklSwift.ModuleSource
    ) async throws -> AppRoleToken.Module {
        try await evaluator.evaluateModule(source: source, as: Module.self)
    }
}